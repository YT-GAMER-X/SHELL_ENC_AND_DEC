# -*- coding: utf-8 -*-
import os
import sys
import fileinput

N = "\033[0m"
D = "\033[90m"
W = "\033[1;37m"
B = "\033[1;34m"
R = "\033[1;31m"
G = "\033[1;32m"
Y = "\033[1;33m"
C = "\033[1;36m"

sukses = G + "[" + W + "√" + G + "] "
ERROR = R + "[" + G + "!" + R + "]"

os.system ("clear")

print ("\033[1;32m▓\033[1;32m█\033[1;32m█   \033[1;32m█\033[1;32m█\033[1;32m▓▄▄▄\033[1;32m█\033[1;32m█\033[1;32m█\033[1;32m█\033[1;32m█\033[1;32m▓")
print (" ▒\033[1;32m█\033[1;32m█  \033[1;32m█\033[1;32m█▒\033[1;32m▓  \033[1;32m█\033[1;32m█▒ \033[1;32m▓▒")
print ("  ▒\033[1;32m█\033[1;32m█ \033[1;32m█\033[1;32m█\033[1;33m░▒ \033[1;32m▓\033[1;32m█\033[1;32m█\033[1;33m░ ▒\033[1;33m░")
print ("  \033[1;33m░ ▐\033[1;32m█\033[1;32m█\033[1;32m▓\033[1;33m░\033[1;33m░ \033[1;32m▓\033[1;32m█\033[1;32m█\033[1;32m▓ \033[1;33m░ ")
print ("  \033[1;33m░ \033[1;32m█\033[1;32m█▒\033[1;32m▓\033[1;33m░  ▒\033[1;32m█\033[1;32m█▒ \033[1;33m░ ")
print ("   \033[1;32m█\033[1;32m█▒▒▒   ▒ \033[1;33m░\033[1;33m░   ")
print (" \033[1;32m▓\033[1;32m█\033[1;32m█ \033[1;33m░▒\033[1;33m░     \033[1;33m░    ")
print (" ▒ ▒ \033[1;33m░\033[1;33m░    \033[1;33m░ \033[1;33m░    ")
print (" \033[1;33m░ \033[1;33m░              ")
print ("")
print ("   ▄\033[1;32m█\033[1;32m█\033[1;32m█\033[1;32m█  ▄▄▄       \033[1;32m█\033[1;32m█\033[1;32m█▄ ▄\033[1;32m█\033[1;32m█\033[1;32m█\033[1;32m▓\033[1;32m▓\033[1;32m█\033[1;32m█\033[1;32m█\033[1;32m█\033[1;32m█ \033[1;32m█\033[1;32m█▀\033[1;32m█\033[1;32m█\033[1;32m█  ")
print ("▒ \033[1;32m█\033[1;32m█▒ ▀\033[1;32m█▒▒\033[1;32m█\033[1;32m█\033[1;32m█\033[1;32m█▄    \033[1;32m▓\033[1;32m█\033[1;32m█▒▀\033[1;32m█▀ \033[1;32m█\033[1;32m█▒\033[1;32m▓\033[1;32m█   ▀\033[1;32m▓\033[1;32m█\033[1;32m█ ▒ \033[1;32m█\033[1;32m█▒")
print ("\033[1;33m░▒\033[1;32m█\033[1;32m█\033[1;33m░▄▄▄\033[1;33m░▒\033[1;32m█\033[1;32m█  ▀\033[1;32m█▄  \033[1;32m▓\033[1;32m█\033[1;32m█    \033[1;32m▓\033[1;32m█\033[1;32m█\033[1;33m░▒\033[1;32m█\033[1;32m█\033[1;32m█  \033[1;32m▓\033[1;32m█\033[1;32m█ \033[1;33m░▄\033[1;32m█ ▒")
print ("\033[1;33m░\033[1;33m░\033[1;32m▓\033[1;32m█  \033[1;32m█\033[1;32m█\033[1;32m▓\033[1;33m░\033[1;32m█\033[1;32m█▄▄▄▄\033[1;32m█\033[1;32m█ ▒\033[1;32m█\033[1;32m█    ▒\033[1;32m█\033[1;32m█ ▒\033[1;32m▓\033[1;32m█  ▄▒\033[1;32m█\033[1;32m█▀▀\033[1;32m█▄  ")
print ("\033[1;33m░▒\033[1;32m▓\033[1;32m█\033[1;32m█\033[1;32m█▀▒\033[1;33m░ \033[1;32m▓\033[1;32m█   \033[1;32m▓\033[1;32m█\033[1;32m█▒▒\033[1;32m█\033[1;32m█▒   \033[1;33m░\033[1;32m█\033[1;32m█▒\033[1;33m░▒\033[1;32m█\033[1;32m█\033[1;32m█\033[1;32m█\033[1;33m░\033[1;32m█\033[1;32m█\033[1;32m▓ ▒\033[1;32m█\033[1;32m█▒")
print (" \033[1;33m░▒   ▒   ▒▒   \033[1;32m▓▒\033[1;32m█\033[1;33m░\033[1;33m░ ▒\033[1;33m░   \033[1;33m░  \033[1;33m░\033[1;33m░\033[1;33m░ ▒\033[1;33m░ \033[1;33m░ ▒\033[1;32m▓ \033[1;33m░▒\033[1;32m▓\033[1;33m░")
print ("  \033[1;33m░   \033[1;33m░    \033[1;33m░   ▒▒ \033[1;33m░\033[1;33m░  \033[1;33m░      \033[1;33m░ \033[1;33m░ \033[1;33m░    \033[1;33m░▒ \033[1;33m░ ▒\033[1;33m░")
print ("\033[1;33m░ \033[1;33m░   \033[1;33m░ \033[1;33m░  \033[1;33m░   ▒   \033[1;33m░      \033[1;33m░      \033[1;33m░     \033[1;33m░   \033[1;33m░ ")
print ("      \033[1;33m░        \033[1;33m░  \033[1;33m░       \033[1;33m░      \033[1;33m░     \033[1;33m░     ")
print ("")
print ("▒\033[1;32m█\033[1;32m█   \033[1;32m█\033[1;32m█▒")
print ("▒▒ \033[1;32m█ \033[1;32m█ ▒\033[1;33m░")
print ("\033[1;33m░\033[1;33m░  \033[1;32m█   \033[1;33m░ ๛๛๛๛๛๛\033[1;33m『\033[1;32m𝚂𝙷𝙴𝙻𝙻\033[1;33m๛\033[1;32m𝙴𝙽𝙲\033[1;33m๛\033[1;32m𝙰𝙽𝙳\033[1;33m๛\033[1;32m𝙳𝙴𝙲\033[1;33m』")
print (" \033[1;33m░ \033[1;32m█ \033[1;32m█ ▒ ")
print ("▒\033[1;32m█\033[1;32m█▒ ▒\033[1;32m█\033[1;32m█▒")
print ("▒▒ \033[1;33m░ \033[1;33m░\033[1;32m▓ \033[1;33m░")
print ("\033[1;33m░\033[1;33m░   \033[1;33m░▒ \033[1;33m░")
print (" \033[1;33m░    \033[1;33m░  ")
print (" \033[1;33m░    \033[1;33m░  ")
print ("")
print ("")

banner = """
{}[{}1{}] {}๛  {}『{}𝙴𝙽𝙲𝚁𝙸𝙿𝚃{}』\n{}[{}2{}] {}๛  {}『{}𝙳𝙴𝙲𝚁𝚈𝙿𝚃{}』
""".format(Y,G,Y,Y,Y,G,Y,Y,G,Y,Y,Y,G,Y)
#YT GAME X
print banner

def dekrip():
   try:
       sc = raw_input(Y + "『" + G + "𝙸𝙽𝙿𝚄𝚃" + Y + "๛" + G + "𝙵𝙸𝙻𝙴" + Y + "๛" + G + "𝙿𝙰𝚃𝙷" + Y + "』" + G + "==" + Y + "> " + G)
       f = open(sc,"r")
       filedata = f.read()
       f.close()

       newdata = filedata.replace("eval","echo")

       out = raw_input(Y + "『" + G + "𝙾𝚄𝚃𝙿𝚄𝚃" + Y + "๛" + G + "𝙵𝙸𝙻𝙴" + Y + "๛" + G + "𝙿𝙰𝚃𝙷" + Y + "』" + G + "==" + Y + "> " + G)
       f = open(out,"w")
       f.write(newdata)
       f.close()

       os.system("touch tes.sh")
       os.system("bash " + out + " > tes.sh")
       os.remove(out)
       os.system("mv -f tes.sh " + out)
       print (sukses + "Done..")

   except KeyboardInterrupt:
       print (eror + " Stopped!")
   except IOError:
       print (eror + "𝙵𝚒𝚕𝚎 𝙽𝚘𝚝 𝙵𝚘𝚞𝚗𝚍!")

def enkrip():
   try:
       script = raw_input(Y + "『" + G + "𝙸𝙽𝙿𝚄𝚃" + Y + "๛" + G + "𝙵𝙸𝙻𝙴" + Y + "๛" + G + "𝙿𝙰𝚃𝙷" + Y + "』" + G + "==" + Y + "> " + G)
       output = raw_input(Y + "『" + G + "𝙾𝚄𝚃𝙿𝚄𝚃" + Y + "๛" + G + "𝙵𝙸𝙻𝙴" + Y + "๛" + G + "𝙿𝙰𝚃𝙷" + Y + "』" + G + "==" + Y + "> " + G)
       os.system("bash-obfuscate " + script + " -o " + output )
       print (sukses + "Done..")
   except KeyboardInterrupt:
       print (eror + "𝚂𝚝𝚘𝚙𝚙𝚎𝚍!")
   except IOError:
       print (eror + "𝙵𝚒𝚕𝚎 𝙽𝚘𝚝 𝙵𝚘𝚞𝚗𝚍!")


takok = raw_input(Y + "『" + G + "𝚂𝙴𝙻𝙴𝙲𝚃" + Y + "๛" + G + "𝙽𝚄𝙼𝙱𝙴𝚁" + Y + "』" + G + "==" + Y + "> " + G)

if takok == "1" or takok == "01":
   enkrip()
elif takok == "2" or takok == "02":
   dekrip()
else:
   print ("\n" + ERROR + "『𝚆𝚛𝚘𝚗𝚐๛𝚒𝚗𝚙𝚞𝚝』")
